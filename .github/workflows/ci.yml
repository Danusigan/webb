name: CI Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: vehiclerentnew

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 1234
          MYSQL_DATABASE: vehicle_rental1
        ports:
          - 3309:3306  # Map host port 3309 to container port 3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -p1234"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3309/vehicle_rental1
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1234
      SPRING_JPA_HIBERNATE_DDL_AUTO: update

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Wait for MySQL to be ready
      run: |
        echo "Waiting for MySQL to be ready..."
        for i in {1..30}; do
          if mysqladmin ping -h 127.0.0.1 -P 3309 -u root -p1234 --silent; then
            echo "MySQL is ready!"
            break
          fi
          echo "MySQL not ready yet. Attempt $i/30"
          sleep 2
        done

    - name: Verify database connection
      run: |
        mysql -h 127.0.0.1 -P 3309 -u root -p1234 -e "SHOW DATABASES;"

    - name: Build and test with Maven
      run: mvn clean test
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3309/vehicle_rental1
        SPRING_DATASOURCE_USERNAME: root
        SPRING_DATASOURCE_PASSWORD: 1234
        SPRING_JPA_HIBERNATE_DDL_AUTO: update

    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: vehiclerentnew/target/surefire-reports/

  build-frontend:
    runs-on: ubuntu-latest
    needs: build-backend
    defaults:
      run:
        working-directory: my-app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: my-app/package-lock.json

    - name: Install dependencies
      run: npm install

    - name: Build frontend
      run: npm run build
